
#ifndef mySectorBend_h
#define mySectorBend_h 1

#include "globals.hh"
#include "myAcceleratorComponent.hh"
#include "myGlobals.hh"
#include "myMultipoleField.hh"
#include "G4MagneticField.hh"
#include "myMaterials.hh"
#include "myHelixStepper.hh"
#include "G4FieldManager.hh"
#include "G4ChordFinder.hh"
#include "G4UniformMagField.hh"
#include "G4VisAttributes.hh"
#include "G4Mag_UsualEqRhs.hh"
#include "G4Trd.hh"
#include "G4IntersectionSolid.hh"

class mySectorBend :public myAcceleratorComponent
{

  public:
      //	Constructor taking the id of the dipole, the length
      //	(meter) and curvature (1/meter) of the dipole geometry,
      //	and the vertical magnetic field in Tesla.
      mySectorBend (G4String& id, G4double len, G4double bpRad,
                      G4double b0,G4double angle);

      ~mySectorBend();

     G4VisAttributes* SetVisAttributes();

  protected:
  //  void BuildSectorBendMaterial();
 
  private:

  G4LogicalVolume* SBLogicalVolume(G4String aName,G4double aLength,
                                   G4double angle);



  // Geometrical objects:
  //G4Torus* itsTorus;
G4Tubs* itsTube;

G4Trd* itsTrd;
myBeamPipe* itsBeamPipe;
G4double TrdDelta;

G4IntersectionSolid* itsTubeInTrd;

  // field related objects:
  myHelixStepper* itsStepper;
  G4FieldManager* itsBPFieldMgr;
  G4FieldManager* itsOuterFieldMgr;
  G4UniformMagField* itsMagField;
  G4ChordFinder* itsChordFinder;
  G4Mag_UsualEqRhs* itsEqRhs;

  G4VisAttributes* itsVisAttributes;
};


#endif
