/* 
Beam Delivery Simulation (BDSIM) Copyright (C) Royal Holloway, 
University of London 2001 - 2019.

This file is part of BDSIM.

BDSIM is free software: you can redistribute it and/or modify 
it under the terms of the GNU General Public License as published 
by the Free Software Foundation version 3 of the License.

BDSIM is distributed in the hope that it will be useful, but 
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with BDSIM.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifdef USE_HEPMC3

#ifndef BDSHEPMC3READER_H
#define BDSHEPMC3READER_H

#include "globals.hh"
#include "G4ThreeVector.hh"
#include "G4VPrimaryGenerator.hh"

class BDSBunch;
class G4Event;

namespace HepMC3
{
  class GenEvent;
  class Reader;
}

class BDSHepMC3Reader: public G4VPrimaryGenerator
{
public:
  BDSHepMC3Reader();
  BDSHepMC3Reader(const G4String& distrType,
		  const G4String& fileNameIn,
		  const BDSBunch* bunchIn);
  virtual ~BDSHepMC3Reader();

  /// Accessor.
  inline HepMC3::GenEvent* GetHepMCGenEvent() const {return hepmcEvent;}

  // The default behavior is that a single HepMC event generated by
  // GenerateHepMCEvent() will be converted to G4Event through HepMC2G4().
  virtual void GeneratePrimaryVertex(G4Event* anEvent);

protected:
  // Note that the life of HepMC event object must be handled by users.
  // In the default implementation, a current HepMC event will be
  // deleted at GeneratePrimaryVertex() in the next event.
  HepMC3::GenEvent* hepmcEvent; // (care for single event case only)

  // We  have to take care for the position of primaries because
  // primary vertices outside the world voulme give rise to G4Execption.
  // If the default implementation is not adequate, an alternative
  // can be implemented in your own class.
  virtual G4bool CheckVertexInsideWorld(const G4ThreeVector& pos) const;

  // service method for conversion from HepMC::GenEvent to G4Event
  void HepMC2G4(const HepMC3::GenEvent* hepmcevt, G4Event* g4event);

  // Implement this method in his/her own concrete class.
  // An empty event will be created in default.
  virtual HepMC3::GenEvent* GenerateHepMCEvent();

private:

  HepMC3::Reader* reader;
};

#endif
#endif
