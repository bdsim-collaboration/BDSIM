\input texinfo @c -*-texinfo-*-
@c %**start of header
@setfilename bdsim.info
@settitle BDSIM User's Manual v0.4
@c This date is automatically updated when you save this file:
@set lastupdate Jul 5, 2007
@set revision 0.4
@c %**end of header

@setchapternewpage off

@c @copying
@c Copyright @copyright{} 2004-2007 Royal Holloway University London.
@c @end copying


@titlepage
@title BDSIM User's Manual v0.4
@author I. Agapov, S.Malton
@author revision @value{revision}, last updated @value{lastupdate}
@end titlepage
@setcontentsaftertitlepage

@contents



@node Top, Intro, (dir), (dir)
@top BDSIM v0.4 User's Manual


This file is updated automatically from @file{manual.texi} last updated on @value{lastupdate}.


@c @insertcopying

@menu
* Intro::                       
* Installation::                
* Lattice::      
* Visualization::                        
* Physics:: 
* Output::                 
* Architecture::                
* Geometry::                    
* Fields::     
* Bunches::
* References::                  
@end menu


@c cccccccccccccccccccccccccccccccccccccccccc
@c
@c cccccccccccccccccccccccccccccccccccccccccc

@node Intro, Installation, Top, Top
@chapter About BDSIM

BDSIM is a Geant4 extension toolkit for simulation of particle
transport in accelerator beamlines. It provides a collection of classes representing typical
accelerator components, a collection of physics processes for fast tracking, procedures of ``on the fly'' geometry 
construction  and interfacing to ROOT analysis. 
 

@c cccccccccccccccccccccccccccccccccccccccccc
@c
@c cccccccccccccccccccccccccccccccccccccccccc

@node Installation, Lattice,Intro, Top
@chapter Obtaining, Installing and Running


@code{BDSIM} can be downloaded from @uref{http://ilc.pp.rhul.ac.uk/bdsim.html}. This site also contains
some information on planned releases and other issues.
Alternatively, a development version is accessible under @uref{http://cvs.pp.rhul.ac.uk}. 
Download the tarball and extract the source code. Make sure Geant4 is installed and appropriate environment
variables defined. Then go through the configuration procedure 
by running the @code{./configure} script.

@code{./configure}


It will create a Makefile from template defined in Makefile.in. You may want to edit the Makefile manually to meet your needs 
(if your CLHEP version is greater than 2.x put -DCLHEP_VERSION=9). Then start the compilation by typing

@code{./make}

If the compilation is successful @code{bdsim} executable should be created in the current directory or in the
@code{$G4WORKDIR} directory in case this variable is defined. Next, set up the (DY)LD_LIBRARY_PATH variable to
point to the ./parser directory and to the directory where libbdsim.so is.


@code{BDSIM} is invoked by the command
@code{bdsim} @option{options}

where the options are

@example
--file=<filename>    : specify the lattice file
--output=<fmt>       : output format (root|ascii), default ascii
--outfile=<file>     : output file name. Will be appended with _N
                       where N = 0, 1, 2, 3... etc.
--vis_mac=<file>     : visualization macro script, default vis.mac
--help               : display this message
--verbose            : display general parameters before run
--verbose_event      : display information for every event
--verbose_step=N     : display tracking information after each step
--verbose_event_num  : display tracking information for event number N
--batch              : batch mode - no graphics
--outline=<file>     : print geometry/optics info to <file>
--outline_type=<fmt> : type of outline format
                       where fmt = optics | survey
@end example




To run bdsim one first has to define the beamline geometry in a file which is then 
passes to bdsim via the @code{--file} command line option, for example

@example
bdsim --file=line.gmad --output=root --batch
@end example


The next section describes how to do it in more detail. 

@c cccccccccccccccccccccccccccccccccccccccccc
@c
@c cccccccccccccccccccccccccccccccccccccccccc

@node Lattice,Visualization,Installation,Top
@chapter Lattice description

@menu
* program-structure::
* expressions::
* elements::
* run-control::                       
@end menu

The beamline, beam properties and physics processes are specified in the input file written in the 
GMAD language which is a variation of MAD language extended to handle sophisticated geometry and parameters 
relevant to radiation transport. GMAD is described in this section. Examples of input files can be found in the
@code{BDSIM} distribution in the @code{examples} directory.


@node program-structure
@section Program structure


A GMAD program consists of a sequence of element definitions and control commands.
For example, tracking a 1 GeV electron beam through a FODO cell will require a file like this:

for example

@example

@code{qf: quadrupole, l=0.5*m, k1=0.1};
@code{qd: quadrupole, l=0.5*m, k1=-0.1};
@code{d: drift, l=0.5*m};
@code{fodo : line=(qf,d,qd,d)};
@code{use,period=fodo};
@code{beam, particle="e-",energy=1*GeV};

@end example

Generally, the user has to define a sequence of elements (with @code{drift}, @code{quadrupole},@code{line} etc.), 
then select the beamline with the @code{use} command and specify beam parameters and other options with
@code{beam} and @code{option} commands. The  @code{sample} command controls what sort of information will be recorded
during the execution.


The parser is case sensitive. However, for convenience of porting lattice 
descriptions from MAD the keywords can be both lower and upper case.
The GMAD language is discussed in more detail in this section.


@node expressions
@section Arithmetical expressions

Throughout the program a standard set of arithmetical expressions is available. Every expression is ended with a 
semicolon. For example

@example

x=1;
y=2.5-x;
z=sin(x) + log(y) - 8e5;

@end example

The variables then could be used along with numerical constants. The @code{if-else} clause is also available, for
example

@example
z=1;
if(z<2)
y=2.5-x
  else
y=15;

@end example


@node elements
@section Physical elements and Entities

@menu
* coordinate-system::
* units::
* marker::                       
@end menu


GMAD implements almost all the standard MAD elements, but also allows to define arbitrary geometric entities and 
magnetic field configurations. The geometry description capabilities are extended by using ``drivers'' 
to other geometry description formats which makes interfacing and standardisation easier.
The syntax of a physical element declaration is

@code{element_name : element_type, attributes;}

for example

@code{qd : quadrupole, l = 0.1*0.1, k1 = 0.01;}

@code{element_type} can be of basic type or inherited. Allowed basic types are

@itemize
@item marker
@item drift
@item sbend
@item rbend
@item quadrupole
@item sextupole
@item octupole
@item multipole
@item vkick
@item hkick
@item rf
@item rcol
@item ecol
@item laser
@item transform3d
@item element
@end itemize


All elements except @code{element} are by default modeled by an iron cylinder (given by the @code{boxSize} option)
with the vacuum beampipe (defined by @code{beampipeRadius} option). 
An already defined element can be used as a new element type. The child element will have the 
attributes of the parent. 

@example
q:quadrupole, l=1*m, k1=0.1;
qq:q,k1=0.2;
@end example




@node coordinate-system
@subsection Coordinate system

@node units
@subsection Units

The usual accelerator coordinate system is assumed (see ref)

In GMAD the SI units are used. 

@multitable @columnfractions .5 .5
@item Length 
 [m] (metres)
@item angle 
 [rad] (radians)
@item quadrupole coefficient 
 [m**(-2)]
@item multipole coefficient
 2n poles 	[m**(-n)]
@item electric voltage 	
 [MV] (Megavolts)
@item electric field strength 
 [MV/m]
@item particle energy 
 [GeV]
@item particle mass 
 [GeV/c**2]
@item particle momentum 
 [GeV/c]
@item beam current 
 [A] (Amperes)
@item particle charge 
 [e] (elementary charges)
@item emittances 
 [pi m mrad]
@end multitable 

There are some predefined numerical values

@multitable @columnfractions .5 .5
@item pi 
 3.14159265358979
@item me 
 electron rest mass
@item mp 
 proton rest mass
@item GeV 
 1 
@item eV 
 1^-9 
@item KeV 
 10^-6 
@item MeV 
 10^-3 
@item TeV 
 10^3 
@item m
1
@item mm
1^-3
@item cm
1^-2
@item rad
1
@item mrad
1^-3
@item clight
2.99792458e+8

@end multitable

for example, one can write either 100 or 0.1 * KeV when energy constants are concerned.

@node marker
@subsection marker

@code{marker} has no effect but allows one to identify a position in the beam line (say, where a sampler will
be placed). It has no attributes.

Example:

@code{m1 : marker;}


@subsection drift

@code{drift} defines a straight drift space.
Attributes:
@itemize 
@item @code{l} - length [m] (default 0)
@item @code{aper} - aperture [m] (default same as beampipe radius)
@end itemize

Example :

@code{d13 : drift, l=0.5*m;}


@subsection rbend

@code{rbend} defines a rectangular bending magnet.
Attributes:
@itemize 
@item @code{l} - length [m] (default 0)
@item @code{angle} - bending angle [rad] (default 0)
@item @code{B} - magnetic field [T] 
@item @code{aper} - aperture [m] (default same as beampipe radius)
@item @code{outR} - external radius [m] of magnet (default set to @code{aper}+1cm)
@end itemize

when @code{B} is set, this defines a magnet with appropriate field strength and @code{angle}
is not taken into account. Otherwise, @code{B} that corresponds to bending angle @code{angle} for a particle in use 
(defined by the @code{beam} command, with appropriate energy and rest mass) is calculated and used in the simulations.

Example :

@code{rb1 : rbend, l=0.5*m, angle = 0.01;}

@subsection sbend

@code{sbend} defines a sector bending magnet.
Attributes:
@itemize 
@item @code{l} - length [m] (default 0)
@item @code{angle} - bending angle [rad] (default 0)
@item @code{B} - magnetic field [T] 
@item @code{aper} - aperture [m] (default same as beampipe radius)
@item @code{outR} - external radius [m] of magnet (default set to @code{aper}+1cm)
@end itemize

Example :

The meaning of @code{B} and @code{angle} is the same as for @code{rbend}.

@code{rb1 : rbend, l=0.5*m, angle = 0.01;}

@subsection quadrupole

@code{quadrupole} defines a quadrupole.
Attributes:
@itemize 
@item @code{l} - length [m] (default 0)
@item @code{k1} - normal quadrupole coefficient
k1 = (1/B rho ) (dBy  / dx) [m^-2]
Positive @code{k1} means horizontal focusing of positively charged particles. (default 0)
@item ks1 - skew quadrupole coefficient
ks1 =  (1/B rho ) (dBy  / dx) [m^-2]
where (x,y) is now a coordinate system rotated by 45 degrees around s with respect to the normal one.(default 0). 
@item @code{tilt} [rad] - roll angle about the longitudinal axis, clockwise.
@item @code{aper} - aperture [m] (default same as beampipe radius)@
@item @code{outR} - external radius [m] of magnet (default set to @code{aper}+1cm)
@end itemize

Example :

@code{qf : quadrupole, l=0.5*m , k1 = 0.5 , tilt = 0.01;}

@subsection sextupole

@code{sextupole} defines a sextupole.
Attributes:
@itemize 
@item @code{l} - length [m] (default 0)
@item @code{k2} - normal sextupole coefficient
k2 = (1/B rho ) (d^2 By  / dx^2) [m^-3]
@item @code{ks2} - skew sextupole coefficient
ks2 =  (1/B rho ) (d^2 By  / dx^2) [m^-3]
where (x,y) is now a coordinate system rotated by 30 degrees around s with respect to the normal one.(default 0). 
@item @code{tilt} [rad] - roll angle about the longitudinal axis, clockwise.
@item @code{aper} - aperture [m] (default same as beampipe radius)
@item @code{outR} - external radius [m] of magnet (default set to @code{aper}+1cm)
@end itemize

Example :

@code{sf : sextupole, l=0.5*m , k2 = 0.5 , tilt = 0.01;}

@subsection octupole

@code{octupole} defines an octupole.
Attributes:
@itemize 
@item @code{l} - length [m] (default 0)
@item @code{k2} - normal sextupole coefficient
k3 = (1/B rho ) (d^3 By  / dx^3) [m^-3]
Positive @code{k1} means horisontal focusing of positively charged particles. (default 0)
@item ks3 - skew sextupole coefficient
ks3 =  (1/B rho ) (d^3 By  / dx^3) [m^-3]
where (x,y) is now a coordinate system rotated by 30 degrees around s with respect to the normal one.(default 0). 
@item @code{tilt} [rad] - roll angle about the longitudinal axis, clockwise.
@item @code{outR} - external radius [m] of magnet (default set to @code{aper}+1cm)
@end itemize

Example :

@code{sf : octupole, l=0.5*m , k3 = 0.5 , tilt = 0.01;}

@subsection multipole

@code{octupole} defines an octupole.
Attributes:
@itemize 
@item @code{l} - length [m] (default 0)
@item @code{knl} - normal multipole
knl_n = (1/B rho ) (d^n By  / dx^n) [m^-n]
Positive @code{k1} means horisontal focusing of positively charged particles. (default 0)
@item ks3 - skew multipole
ksl_n =  (1/B rho ) (d^n By  / dx^n) [m^-n]
where (x,y) is now a coordinate system rotated by 30 degrees around s with respect to the normal one.(default 0). 
@item @code{tilt} [rad] - roll angle about the longitudinal axis, clockwise.
@item @code{outR} - external radius [m] of magnet (default set to @code{aper}+1cm)
@end itemize

Example :

@code{mul : multipole, l=0.5*m , knl=@{ 0,0,1 @} , ksl=@{ 0,0,0 @};}


@subsection rf

@code{rf} defines an rf cavity


Attributes:
@itemize 
@item @code{l} - length [m] (default 0)
@item @code{gradient} - field gradient [MV / m]
@end itemize

Example : 

@code{rf1 : rf,l=5*m, gradient = 10 * MV / m; }


@subsection rcol

@code{rcol} defines a rectangular collimator

Attributes:
@itemize 
@item @code{l} - length [m] (default 0)
@item @code{xsize} - horizontal aperture [m]
@item @code{ysize} - vertical aperture [m]
@item @code{material} - material 
@item @code{outR} - limits external extent [m] of collimator (default set to @code{aper}+1cm)
@end itemize

Example : 

@code{col1 : rcol,l=0.4*m, xsize=2*mm, ysize=1*mm, material="W"}

The longitudinal collimator structure is not taken into account. To do this the user has to describe the collimator
with the generic type @code{element}   

@subsection ecol

@code{ecol} defines an elliptical collimator

Attributes:
@itemize 
@item @code{l} - length [m] (default 0)
@item @code{xsize} - horizontal aperture [m]
@item @code{ysize} - vertical aperture [m]
@item @code{material} - material 
@item @code{outR} - limits external extent [m] of collimator (default set to @code{aper}+1cm)
@end itemize


Example : 

@code{col2 : ecol,l=0.4*m, xsize=2*mm, ysize=1*mm, material="W"}

Here the longitudinal collimator structure is also not taken into account. 


@subsection solenoid
Not yet implemented

@subsection hkick and vkick

@code{hkick} and @code{vkick} are equivalent to a @code{rbend} and an @code{rbend}
rotated by 90 degrees respectively.

@subsection transform3d

An arbitrary 3-dimensional transformation of the coordinate system is done by
placing a @code{transform3d} element in the beamline. The syntax is

@itemize
@item @code{x} = @code{<x offset>}
@item @code{y} = @code{<y offset>}
@item @code{z} = @code{<z offset>}
@item @code{phi} = @code{<phi Euler angle>}
@item @code{theta} = @code{<theta Euler angle>}
@item @code{psi} = @code{<psi Euler angle>}
@end itemize

Example: 

@code{rot : transform3d, psi=pi/2}


@subsection element

All the elements are in principle examples of a general type @code{element} 
which can represent an arbitrary geometric 
entity with arbitrary B field maps 
Its attributes are

@itemize
@item @code{geometry} = @code{<geometry_description>}
@item @code{bmap} = @code{<bmap_description> }
@c @item @code{emap} = @code{<emap_description>}
@item @code{outR} - limits external extent component box size (default set to @code{aper}+1cm)
@end itemize


Descriptions are of the form 

@code{format:filename}

 where @code{filename} is the path to the 
file with the geometry description and @code{format} defines the geometry description format.
The possible formats are given in @ref{Geometry}.


Example :

@code{qq : element, geometry ="mokka:qq.sql", bmap ="mokka:qq.bmap";}

@c @float Figure, fig1
@c @caption{ An example a cryomodule described as @code{element} }
@c @image{cryomodule,,4in}
@c @end float

@subsection line

elements are grouped into sequences by the @code{line} command.

@code{@var{line_name} : line=(@var{element_1},@var{element_2},...);}

where @var{element_n} can be any element or another line.

Example : 

A sequence of FODO cells can be defines as

@example

@code{qf: quadrupole, l=0.5, k1=0.1};
@code{qd: quadrupole, l=0.5, k1=-0.1};
@code{d: drift, l=0.5};
@code{fodo : line=(qf,d,qd,d)};
@code{section : line=(fodo,fodo,fodo);}
@code{beamline : line=(section,section,section);}
@end example

@c @subsection aperture

@c @subsection material

@c @code{<material> : material,Z=,A=,density=,temperature= }

@c Attributes
@c @itemize
@c @item @code{Z} - atomic number
@c @item @code{A} - mass number
@c @item @code{density} - [kg/m]
@c @item @code{temperature} [K]
@c @end itemize

@c @subsection pipe

@c the beam pipe parameters are used for particle tracking inside elements when the use geometry is
@c not defined. The beam pipe radius is assigned by the @code{pipe} command 

@c @code{pipe, range=<range>, range=, r=, thickness=, material=<material>};

@c Attributes
@c @itemize
@c @item @code{range} - element range to assign the radius for
@c @item @code{r} - radius [m]
@c @item @code{thickness} - thickness [m]
@c @item @code{material} - beam pipe material
@c @end itemize

@c Example :

@c Supposing we want to define a copper beam pipe for ...  

@c @example
@c @code{iron : material, Z=1,A=1,density=100, temperature=;}
@c @code{copper : material,Z=,A=,density=,temperature=;;}

@c @code{fodo : line=(qf,d,qd,d);}
@c @code{pipe, range=qf/qd, r=0.2, thickness = 0.1,material=copper; }
@c @code{pipe, range=d[2], r=0.1, thickness = 0.05,material=iron; }

@c @end example

@subsection laser

@code{laser} defines a drift section with a laser beam inside.

@code{<laser_name>: laser, l=<val>, x=<xdir>, y=<ydir>, z=<zdir>, waveLength=<val>;}

Attributes
@itemize
@item @code{l} - length of the drift section [m]
@item @code{x,y,z} - components of the laser direction vector
@item @code{waveLength} - laser wave length [m]
@end itemize

The laser is considered to be the intersection of the laser beaam with the volume of the drift section.

@c @subsection gas

@c (starting from v0.2)

@c @code{gas} command is used to introduce gas into the beam pipe. 
@c @footnote{in realistic situations the gas profile can vary in transverse dimensions.
@c This is not taken into account for a)technical reasons b)one does not know the profile anyway}

@c @code{gas, period=, components=@{c1,c2,...@},parts=@{p1,p2,...@} };

@c where
@c @itemize
@c @item @code{c1,c2,...} - gas components names 
@c @item @code{p1,p2,...} - parts (100%=1). They need not sum up to 1.
@c @end itemize 

@c the gas components are defined by

@c @code{c1 : gas, name=<name>, A=<A>, Z=<Z>, profile=<profile_name>};

@c where
@c @itemize
@c @item @code{<Z>} - atomic number
@c @item @code{<A>} - mass number
@c @item @code{<profile_name>} - name of gas profile definition 
@c @end itemize 

@c the gas profile is defined as 

@c @code{<profile_name> : gas_profile = (<element>:<pressure>, <element>:<pressure>) };

@c where
@c @itemize
@c @item @code{<element>} - name of the beamline component
@c @item @code{<pressure>} - gas pressure (bar)
@c @end itemize 


@c The gas pressure is then interpolated between the points where it is defined.
@c Issuing multiple @code{gas} commands acts additively.

@c Example :

@c To introduce the gas into a fodo cell

@c @example

@c @code{...element definitions...}

@c @code{fodo : line=(qf,d,qd,d);}

@c @code{co2 : gas, name="c02", Z=22,A=44,profile=co2profile;}
@c @code{h20 : gas, name="h2", Z=1,A=1,profile=co2profile;}

@c @code{c02profile : gas_profile = (qd:0.01, qf:0.02*nbar,d:0.03*nbar); }
@c @code{h20profile : gas_profile = (qd:0.04, qf:0.01*nbar,d:0.03*nbar); }

@c @code{gas, period=fodo,components= @{ c02,h20@},parts=@{0.7,0.8@}; }


@c @end example 


@subsection spec keyword

Starting from v0.3 it is possible to add the @code{spec} keyword to all element definition. 

@code{spec="keyword1=value1&keyword2=value2&.."}

By this means any set of keyword/value pairs can be passed to the accelerator component construction classes.

@example

@code{qd : mquad,l=0.5 * m, k1 = qdk1, spec="type=cylinder";}

@end example


@subsection Element number

When several elements with the same name are present in the beamline they can be accessed by their 
number in the sequence. In the next example the sampler is put before the second drift 

@example

@code{bl:line=(d,d,d);}
@code{sample,range=d[2];}

@end example


@subsection Element attributes

Element attributes such as length, multipole coefficients etc, can be accessed by putting square brackets
after the element name, e.g.

@example

@code{x=d[l];}

@end example


@subsection Material table

There is a set of predefined materials for use in elements such as collimators, e.g. 

``Al''
``W''
``Iron''
``Copper''
``Graphite'' etc.

Note that each geometry driver such as Mokka has its own set of materials

@node run-control
@section Run control and output

The execution control is performed in the GMAD input file through @code{option} and @code{sample}
commands. How the results are recorded is controlledby the @code{sample} command.
When the visualization is turned on, it is also controlled through Geant4 command prompt

@subsection  @code{option}

Most of the options in @code{bdsim} are set up by the command

@code{option, <name>=value,...};


The following options influence the geometry

@example

@code{beampipeRadius}    - default beampipe radius [m]
@code{beampipeThickness} - default beampipe thickness [m]
@code{tunnelRadius}      - tunnel Radius [m]
@code{boxSize}           - default accelerator component size [m]


@end example

The following options influence the tracking

@example

@code{deltaChord}          - chord finder precision
@code{deltaIntersection}   - boundary intersection precision
@code{chordStepMinimum}    - minimum step size
@code{lengthSafety}        - element overlap safety
@code{thresholdCutCharged} - charged particle cutoff energy
@code{thresholdCutPhotons} - photon cutoff energy
@code{randomSeed}          - seed for the random number generator
                             setting to -1 uses the system clock to generate the seed
@code{stopTracks}          - if set, tracks are terminated after interaction with
                             material and energy deposit recorded
@code{physicsList}         - determines the set of physics processes used
@code{ngenerate}           - number of primary particles fired when in batch mode
@code{nperfile}            - number of events recorded per file
@code{nlinesIgnore}        - number of lines to skip when reading bunch files
@code{synchRadOn}          - turn on Synchrotron Radiation process
@code{srTrackPhotons}      - whether to track the SR photons
@code{srLowX}              - Sets lowest energy of SR to X*E_critical
@code{srLowGamE}           - lowest energy of propagating SR photons
@code{minimumEpsilonStep}  - minimum relative error acceptable in stepping
@code{maximumEpsilonStep}  - maximum relative error acceptable in stepping
@code{deltaOneStep}        - set position error acceptable in an integration steps
@code{prodCutPhotons}      - standard overall production cuts for photons
@code{prodCutPhotonsP}     - precision production cuts photons in @code{element}
@code{prodCutElectrons}    - standard overall production cuts for electrons
@code{prodCutElectronsP}   - precision production cuts electrons in @code{element}
@code{prodCutPositrons}    - standard overall production cuts for positrons
@code{prodCutPositronsP}   - precision production cuts positrons in @code{element}



@end example

For a more detailed description of how the option influence the tracking see @ref{Physics}




@subsection @code{beam}

The parameters related to the beam are given by the @code{beam} command

@code{beam, <name>=value,...};


The available parameters are:

@example

@code{particle}    - particle name, "e-","e+","gamma","proton", etc
@code{energy}      - particle energy
@code{distrType}   - type of distribution
@code{distrFile}   - input bunch file

@end example

@code{beam, particle="e+",energy=100*MeV, distrType="gauss";}

@subsection @code{sample}

To record the tracking results one uses the @code{sample} 

@code{sample, range=<element>;}

The sampling plane is then inserted before @code{<element>}

Example :
@example
@code{sample, range=d;}
@end example


Cylindrical sampler of length @code{l} is put around element @code{<element>} at distance @code{<r>} with the command

@code{sample, range=<element>, r=r0, l=l0;}


@subsection @code{use}

@code{use} command selects the beam line for study

@example
@code{use, period=l1,range=q1/q2}
@end example


@c cccccccccccccccccccccccccccccccccccccccccc
@c
@c cccccccccccccccccccccccccccccccccccccccccc

@node Visualization,Physics,Lattice,Top
@chapter Visualization

When @code{BDSIM} is invoked in interactive mode, the run is controlled by the Geant4 shell. A visualization macro
should be then provided. A simple visualization macro is listed below.

@float

@example
# Invoke the OGLSX driver
#  Create a scene handler and a viewer for the OGLSX driver
/vis/open OGLIX

# Create an empty scene
/vis/scene/create

# Add detector geometry to the current scene
/vis/scene/add/volume

# Attach the current scene handler
# to the current scene (omittable)
/vis/sceneHandler/attach

# Add trajectories to the current scene
#  Note: This command is not necessary in exampleN03,
#        since the C++ method DrawTrajectory() is
#        described in the event action.

/vis/viewer/set/viewpointThetaPhi 90 90
# /vis/drawVolume
#/vis/scene/add/trajectories
# /tracking/storeTrajectory 0
#/vis/viewer/zoom
/tracking/storeTrajectory 1
#
# for BDS:
#/vis/viewer/zoom 300
#/vis/viewer/set/viewpointThetaPhi 3 45

@end example

@end float


By default the macro is read from the file named @code{vis.mac}. The name of the file with the macro can also be passed
via the @code{vis_mac} switch.

@example

@code{bdsim --file=line.gmad --vis_mac=my_macro.mac}

@end example

In interactive mode all the Geant4 interactive comamnds are available. For instance, to fire 100 particles type 

@code{/run/beamOn 100} runs the simulation with 100 particles


and to end the session type

@code{exit}

To display help menu

@code{/help};

For more details see @ref{Geant}.

@c float Figure, fig1
@c caption{ An screenshot with an example BDSIM visualization }
@c image{Screenshot,,4in}
@c end float

@c @include visualization.texi

@c cccccccccccccccccccccccccccccccccccccccccc
@c
@c cccccccccccccccccccccccccccccccccccccccccc

@node Physics,Output,Visualization,Top
@chapter Physics

@code{BDSIM} can exploit all physics processes that come with Geant4. In addition fast tracking inside multipole 
magnets is provided. More detailed description of the physics is given below.

@section physicsList option

Depending on for what sort of problem @code{BDSIM} is used, different sorts of physics processes should be turned on. 
This processes are groupes into so called ``physics lists''. The physics list is specified by the `@code{physicsList} 
option in the input file, e.g.

@example

option, physicsList="em_standard";

@end example




Several predefined physics lists are available


@example

"standard"          -   transportation of primary particles only
"em_standard"       -   transporation of primary particles, ionization,
                        bremsstrahlung, multiple scattering 
"em_low"            -   the same but using low energy electromagnetic models
"em_muon"            -   the same but using biased muon cross-sections
"lw"                -   list for laser wire simulation - standard electromagnetic 
                        physics and "laser wire" physics which is Compton Scattering 
                        with total cross-section renormalized to 1.
"hadronic_standard" -   standard electromagnetic, fission, neutron capture, neutron 
                        and proton elastic and inelastic scattering.

@end example

By default the @code{standard} physics List is used


@section Transportation 

The transportation follows the scheme: the step length is selected which is defined either by the distance of the particle
to the boundary of the ``logical volume'' it is currently in (which could be, e.g. field boundary, material boundary or
boundary between two adjacent elements) or by the mean free path of the activated processes. Then the particle is pushed
to the new position and secondaries are generated if necessary. Each volume has an associated transporatation algorithm.
For an on-energy particle travelling close to the optical axis of a quadrupole, dipole or a drift, standard matrix transportation 
algorithms are used @ref{Course}. For multipoles of higher orders and for off-axis/energy particles Runge-Kutta methods are used.



@section Tracking accuracy

The following options influence the tracking accuracy

@code{chordStepMinimum} minimum  chord length for the step



@code{deltaIntersection} determines the precision of locating the point of intersection
of the particle trajectory with the boundary and hence the error in the path length in each 
volume. This may influence the results especially in the case when EM fields are present.


@code{deltaChord} 


@code{lengthSafety} all volumes will have an additional overlap of this length

@code{thresholdCutCharged} energy below which charged particles are not tracked.

@code{thresholdCutPhotons} energy below which photons are not tracked. 


@c cccccccccccccccccccccccccccccccccccccccccc
@c
@c cccccccccccccccccccccccccccccccccccccccccc

@node Output,Architecture,Physics,Top
@chapter Output Analysis

During the execution the following things are recorded:

@example
Energy deposition along the beamline
Sampler hits
@end example

If the output format is @code{ASCII} i.e. if @code{BDSIM} was invoked with the 
@code{--output=ascii} option, then the output file ``output.txt'' containing the hits
will be written which has rows like

@example

#hits (PDGtype  p[GeV/c],x[micron],y[micron],z[m],x'[microrad],y'[microrad]):
11 250 -4.72907 -5.86656 5.00001e-06 0 0
11 250 -8.17576 -4.99729 796.001 0.320334 -0.126792

@end example

if @code{ROOT} output is used then the @code{root} files @code{output_0.root}, 
@code{output_1.root} etc. will be created with each file containing the number of events 
given by @code{nperfile} option.


@c @float Figure, fig2
@c @caption{ An example ROOT Analysis}
@c @image{Screenshot_root,,4in}
@c @end float

The file contains the energy loss histogram and a tree for every sampler in the line
with self-explanatory branch names.


@c This example presents a simple simulation of the ILC collimation system



@c cccccccccccccccccccccccccccccccccccccccccc
@c
@c cccccccccccccccccccccccccccccccccccccccccc

@node Architecture,Geometry,Output,Top
@chapter Implementation Notes

@section Architecture

In this section the architecture of @code{BDSIM} is briefly described for someone wishing to use it
as a class library.


@c @float Figure, fig3
@c @caption{ An example a cryomodule described as @code{element} }
@c @image{bdsim-chart,,4in}
@c @end float


- BDSMultipole

- gmad

- Physics list - adding own physics processes




@section Features to be added in next releases

current development is focused on the beam-gas scattering and implementation of wakefields.


@c cccccccccccccccccccccccccccccccccccccccccc
@c
@c cccccccccccccccccccccccccccccccccccccccccc

@node Geometry,Fields,Architecture,Top
@appendix Geometry description formats

The element with user-defined physical geometry is defined by

@code{<element_name> : element, geometry=format:filename, attributes}

for example,

@code{colli : element, geometry="gmad:colli.geo"}


@section @code{gmad} format

@code{gmad} is a simple format used as G4geometry wrapper. It can be used for specifying more or less
simple geometries like collimators. Available shapes are:

@example 
Box @{
x0=x_origin,
y0=y_origin,
z0=z_origin,
x=xsize,
y=ysize,
z=zsize,
material=MaterialName,
temperature=T
@}
@end example


@example 
Tubs @{
x0=x_origin,
y0=y_origin,
z0=z_origin,
x=xsize,
y=ysize,
z=zsize,
material=MaterialName,
temperature=T
@}
@end example

For example

@example

Cons @{
x0=0,
y0=0,
z0=0,
rmin1=5
rmax1=500
rmin2=5
rmax2=500
z=250
material="Graphite",
phi0=0,
dphi=360,
temperature=1
@}

@end example


A file can contain several objects which will be placed consequently into the volume, A user has to make
sure that there is no overlap between them.


@section @code{mokka}

@include mokka.texi

@section @code{gdml}
GDML is a XML schema for dtector description.
GDML will be supported as an external format starting from next release.


@c cccccccccccccccccccccccccccccccccccccccccc
@c
@c cccccccccccccccccccccccccccccccccccccccccc

@node Fields,Bunches,Geometry,Top
@appendix Field description formats

The element with user-defined physical geometry is defined by command 

@code{<element_name> : element, geometry=format:filename, attributes}

for example,

@code{ colli : element, geometry=plain:colli.geom}

@node Bunches, References, Fields, Top
@appendix Bunch description formats


For compatibility with other simulation codes following bunch formats can be read.For example,
to use the file @code{distr.dat} as input the beam definition should look like

@example

beam, particle="e-",distrType="guineapig_bunch",distrFile="distr.dat",...

@end example


The formats currently supported are listed below



@code{guineapig_bunch}

E[GeV] x[micrometer] y[micrometer] z[micrometer] x'[microrad] y'[microrad]
 

@code{guineapig_slac}

E[GeV] x'[rad] y'[rad] z[nanometer] x[nanometer] y[micrometer]

@code{guineapig_pairs}

E[GeV] x[rad] y[rad] z[rad] x[nanometer] y[nanometer] z[nanometer]

here a particle with E>0 is assumed to be an electron and with E<0 a positron. 

@code{guineapig_pairs}

a custom distribution file format can be specified in the form

@code{distrType="field1[unit1]:field1[unit1]:...}

@example

beam,  particle="e-",
       energy=ener * GeV,
       nparticles=1e+3,
       distrType="pt[1]:E[GeV]:xp[rad]:yp[rad]:z[mum]:x[nm]:y[nm]",
       distrFile="bunches/beam.dat";

@end example


The following distributoion types can be generated

@code{Gaussian}

@code{beam,distrType="gauss",sigmaX=...,sigmaXp=...,sigmaY=...,sigmaYp=...,sigmaE=...,}

@code{Elliptic shell}

generated a thin elliptic shell in @code{x,x'} and @code{y,y'} with given semiaxes

@code{beam,distrType="eshell",x=...,xp=...,y=...,yp=...;}




@c cccccccccccccccccccccccccccccccccccccccccc
@c
@c cccccccccccccccccccccccccccccccccccccccccc

@node References, , Bunches, Top
@chapter References

@enumerate

@anchor{Blair}
@item
G. Blair, Simulation of the CLIC Beam Delivery System Using BDSIM, CLIC Note 509

@anchor{Root}
@item 
Root User's Guide, @uref{http://root.cern.ch/root/doc/RootDoc.html}

@anchor{Geant}
@item 
Geant4 User's Guide, @uref{http://geant4.cern.ch/support/userdocuments.shtml}

@anchor{MAD}
@item 
MAD-X User's Guide, @uref{http://mad.home.cern.ch/mad/uguide.html}

@anchor{Course}
@item 
for example 'Basic course on Accelerator optics' by Schmuesser, Rossbach, CERN Accelerator school


@end enumerate

@bye
@c  LocalWords:  dir texi lastupdate uref http www org html helpgnu ifinfo ftp
@c  LocalWords:  dvi hurd toc gvc URL GTK XmHTML xs nl ripley NT com gettext Qt
@c  LocalWords:  GUI libstdc Docbook SGML libc sed STL Gforth GNUstep TCSH Perl
@c  LocalWords:  Ghostscript PIC GCC Texinfo grep dc bc ethernet GDB IP CIFS CU
@c  LocalWords:  SMB SVGA Khoros Automake OpenStep diff roff Smail tron veritas
@c  LocalWords:  cxref ctrace API LilyPond xephem labanotation LessTif outliner
@c  LocalWords:  Hypercard morphing SeeMe ICQ Diffie Helman RSA SSLv TLSv GPL
@c  LocalWords:  OpenBIOS BIOS LILO dbase dbased Harbour harbour WYSIWYG ISBN
@c  LocalWords:  TruePrint Baecker siff sif cs arizona edu TR ps mt sulaco MP
@c  LocalWords:  RTSP MPEG jasonw ariel ucs unimelb AU stutz dsl TCL Javascript
@c  LocalWords:  Rexx GnuGo jhall isd Biomorph regexp eval gd gnuorg
