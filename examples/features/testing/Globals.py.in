#! /usr/bin/env python2.7

import numpy as _np

class TestParameters():
    ''' Class containing lists and dictionaries of testing data.

        '''
    def __init__(self):
        # convert madx tfs into gmad and ptc lattice, run the simulation for each
        self.bdsimPath = "@CMAKE_BINARY_DIR@/bdsim"

        # load and compare the tracking output from both simualtions
        self.comparatorPath="@CMAKE_BINARY_DIR@/comparator/comparator"


        #components that can be varied
        self.components  = ['drift',
                            'rbend',
                            'sbend',
                            'vkick',
                            'hkick',
                            'quadrupole',
                            'sextupole',
                            'octopole',
                            'decapole',
                            'multipole',
                            'thinmultipole',
                            'rfcavity',
                            'rcol',
                            'ecol',
                            'degrader',
                            'muspoiler',
                            'shield',
                            'solenoid',
                            'laser']
                        
        #parameters that can be varied (across all components)
        self.parameters = ['length',
                          'angle',
                          'kickangle',
                          'field',
                          'e1',
                          'e2',
                          'k1',
                          'k2',
                          'k3',
                          'k4',
                          'knl',
                          'ksl',
                          'gradient',
                          'x(col)',
                          'y(col)',
                          'numWedges',
                          'thickness',
                          'ks',
                          'fint',
                          'fintx',
                          'hgap']

        #parameters that can be varied for each components type.
        self.hasParams = {'drift'        : ['length'],
                         'rbend'         : ['length','angle','field','e1','e2','fint','fintx','hgap'],
                         'sbend'         : ['length','angle','field','e1','e2','fint','fintx','hgap'],
                         'vkick'         : ['length','kickangle'],
                         'hkick'         : ['length','kickangle'],
                         'quadrupole'    : ['length','k1'],
                         'sextupole'     : ['length','k2'],
                         'octopole'      : ['length','k3'],
                         'decapole'      : ['length','k4'],
                         'multipole'     : ['length','knl','ksl'],
                         'thinmultipole' : ['knl','ksl'],
                         'rfcavity'      : ['length','gradient'],
                         'rcol'          : ['length'],
                         'ecol'          : ['length'],
                         'degrader'      : ['length','numWedges','thickness'],
                         'muspoiler'     : ['length','field'],
                         'shield'        : ['length'],
                         'solenoid'      : ['length','ks'],
                         'laser'         : ['length']}

        #use same magnet strengths for multipole and thinMultipole components
        self.magStrengths = {'k1'   : 0.025,
                            'k2'   : 5.0,
                            'k3'   : 1.5e3,
                            'k4'   : 6.0e5,
                            'k5'   : 3.0e8}

        #tuples for multipole and thinMultipole (all K components for given component)
        self.k1l = [(-1.0 * self.magStrengths['k1']),             (0), (1.0 * self.magStrengths['k1'])]
        self.k2l = [(0, -1.0 * self.magStrengths['k1']),          (0), (0, 1.0 * self.magStrengths['k1'])]
        self.k3l = [(0, 0, -1.0 * self.magStrengths['k1']),       (0), (0, 0, 1.0 * self.magStrengths['k1'])]
        self.k4l = [(0, 0, 0, -1.0 * self.magStrengths['k1']),    (0), (0, 0, 0, 1.0 * self.magStrengths['k1'])]
        self.k5l = [(0, 0, 0, 0, -1.0 * self.magStrengths['k1']), (0), (0, 0, 0, 0, 1.0 * self.magStrengths['k1'])]

        #test values for the components parameters
        #field is not set, it will be calculated upon writing based on length, angle, and energy.
        #number of field values must equal the number of angle values.
        self.paramValues = {'length'     : [0.2, 2.0, 20.0],
                            'angle'     : [-0.3, -0.003, 0, 0.003, 0.3],
                            'kickangle' : [-0.003,0,0.003],
                            'field'     : [0, 0, 0, 0, 0],
                            'e1'        : [-0.3491, -0.003491, 0, 0.003491, 0.3491],
                            'e2'        : [-0.3491, -0.003491, 0, 0.003491, 0.3491],
                            'k1'        : [-1.0 * self.magStrengths['k1'], 0, self.magStrengths['k1']],
                            'k2'        : [-1.0 * self.magStrengths['k2'], 0, self.magStrengths['k2']],
                            'k3'        : [-1.0 * self.magStrengths['k3'], 0, self.magStrengths['k3']],
                            'k4'        : [-1.0 * self.magStrengths['k4'], 0, self.magStrengths['k4']],
                            'knl'       : [self.k1l,self.k2l,self.k3l,self.k4l,self.k5l],
                            'ksl'       : [self.k1l,self.k2l,self.k3l,self.k4l,self.k5l],
                            'gradient'  : [-20.0, -0.002, 0, 0.002, 20.0],
                            'x(col)'    : [0.05],
                            'y(col)'    : [0.05],
                            'numWedges' : [1, 5, 10],
                            'thickness' : [0.01, 0.1, 1.0], #fraction of element length
                            'ks'        : [-0.3, -0.003, 0, 0.003, 0.3],
                            'fint'      : [0, 1.0/6.0, 0.5],
                            'fintx'     : [0, 1.0/6.0, 0.5],
                            'hgap'      : [0.01, 0.1]}

        #test particles
        self.particles = ['e-','proton']

        #Accelerator information of example machines. Full test ranges will test all these machines at their
        #energies and for their given particles
        self.accelerators = {'ATF2'         : {'particle' : 'e-', 'energy' : 1.282},
                            'DLS'           : {'particle' : 'e-', 'energy' : 3.0},
                            'ILC'           : {'particle' : 'e-', 'energy' : 250},
                            'CLIC'          : {'particle' : 'e-', 'energy' : 1500},
                            'PSI Gantry 2'  : {'particle' : 'proton', 'energy' : 1.188272},
                            'J-PARC'        : {'particle' : 'proton', 'energy' : 50},
                            'SPS'           : {'particle' : 'proton', 'energy' : 400},
                            'LHC'           : {'particle' : 'proton', 'energy' : 4000},
                            'FCC'           : {'particle' : 'proton', 'energy' : 50000}
                            }


        self.BeamPhaseSpace = {'X'  : [-1.0e-2, -1.0e-4, -1.0e-6, -1.0e-8, 0, 1.0e-8, 1.0e-6, 1.0e-4, 1.0e-2],
                               'PX' : [-1.0e-2, -1.0e-4, -1.0e-6, -1.0e-8, 0, 1.0e-8, 1.0e-6, 1.0e-4, 1.0e-2],
                               'Y'  : [-1.0e-2, -1.0e-4, -1.0e-6, -1.0e-8, 0, 1.0e-8, 1.0e-6, 1.0e-4, 1.0e-2],
                               'PY' : [-1.0e-2, -1.0e-4, -1.0e-6, -1.0e-8, 0, 1.0e-8, 1.0e-6, 1.0e-4, 1.0e-2],
                               'T'  : [-1.0e-2, -1.0e-4, -1.0e-6, -1.0e-8, 0, 1.0e-8, 1.0e-6, 1.0e-4, 1.0e-2],
                               'PT' : [0      ,  1.0e-6,  1.0e-4, 1.0e-2]}

        self.BeamPhaseSpaceExtremeties = {'X'  : [-1.0e-2, 0, 1.0e-2],
                                          'PX' : [-1.0e-2, 0, 1.0e-2],
                                          'Y'  : [-1.0e-2, 0, 1.0e-2],
                                          'PY' : [-1.0e-2, 0, 1.0e-2],
                                          'T'  : [-1.0e-2, 0, 1.0e-2],
                                          'PT' : [0,1.0e-2]}


    def calcEnergy(self,total_energy,particle='e-'):
        #Calculate the energy & momentum of a proton and electron at a given total energy.
        eMass = _con.electron_mass * _con.c**2 / _con.e / 1e9
        pMass = _con.proton_mass * _con.c**2 / _con.e / 1e9

        if particle == 'proton' or particle == 'p':
            protonEnergy = total_energy
            protonKinetic = total_energy - pMass
            protonMomentum = _np.sqrt(total_energy**2 - pMass**2)
            protonGamma = protonEnergy/pMass
            brho = 3.335640951981521 * protonMomentum
            electronMomentum = protonMomentum
            electronEnergy = _np.sqrt(electronMomentum**2 + eMass**2)
            electronKinetic = electronEnergy - eMass
            electronGamma = electronEnergy/eMass
        elif particle == 'e' or particle == 'e-':
            electronEnergy = total_energy
            electronKinetic = total_energy - eMass
            electronMomentum = _np.sqrt(total_energy**2 - eMass**2)
            electronGamma = electronEnergy/eMass
            brho = 3.335640951981521 * electronMomentum
            protonMomentum = electronMomentum
            protonEnergy = _np.sqrt(protonMomentum**2 + pMass**2)
            protonKinetic = protonEnergy - pMass
            protonGamma = protonEnergy/pMass

        res={'e-'     : {'KE'   : electronKinetic,
                         'TE'   : electronEnergy,
                         'P'    : electronMomentum,
                         'GAMMA': electronGamma},
             'proton' : {'KE'   : protonKinetic,
                         'TE'   : protonEnergy,
                         'P'    : protonMomentum,
                         'GAMMA': protonGamma},
             'brho'   : brho}
        return res

